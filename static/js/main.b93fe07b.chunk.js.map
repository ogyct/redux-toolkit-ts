{"version":3,"sources":["slices/PostsSlice.ts","posts/PostAddFrom.tsx","posts/SinglePost.tsx","common/common.tsx","posts/Posts.tsx","slices/CommentsSlice.ts","store.ts","controls/ControlsComponent.tsx","header/Header.tsx","postdetail/Comments.tsx","postdetail/PostDetail.tsx","about/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadingStatus","postsEntityAdapter","createEntityAdapter","sortComparer","a","b","id","initialState","getInitialState","postsStatus","IDLE","fetchPosts","createAsyncThunk","_","thunkAPI","fetch","result","json","putUpdatedPost","post","method","body","JSON","stringify","headers","postsSlice","createSlice","name","reducers","addPost","state","action","max","ids","reduce","prev","current","payload","addOne","deletePost","removeOne","updatePost","upsertOne","extraReducers","builder","addCase","pending","LOADING","fulfilled","READY","upsertMany","actions","postSelectors","getSelectors","posts","PostAddFrom","setCreationMode","dispatch","useDispatch","emptyPost","title","useState","modifyPost","Form","FormGroup","Label","for","Input","type","placeholder","value","onChange","e","prevState","target","Button","onClick","color","SinglePost","currentPost","setCurrentPost","history","useHistory","useEffect","Card","className","CardBody","CardText","tag","push","spinner","Spinner","Posts","useSelector","postsSelection","selectAll","creationMode","map","commentEntityAdapter","loadingStatus","fetchPostComments","response","commentsSlice","commentsSelector","comments","store","configureStore","reducer","useAppDispatch","ControlsComponent","goBack","icon","faLongArrowAltLeft","size","faSync","Header","postsState","selectIds","Navbar","expand","Nav","navbar","NavItem","NavLink","Link","to","NavbarText","length","Comments","useParams","filter","postId","commentsLoadingStatus","CardTitle","CardSubtitle","email","PostDetail","selectById","editMode","setEditMode","setTitle","setBody","CardHeader","About","Badge","App","Container","Row","Col","exact","path","component","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b93fe07b.chunk.js","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n  PayloadAction,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\n\nexport interface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport enum LoadingStatus {\n  IDLE = \"idle\",\n  LOADING = \"loading\",\n  READY = \"ready\",\n  ERROR = \"error\",\n}\n\nconst postsEntityAdapter = createEntityAdapter<Post>({\n  sortComparer(a, b) {\n    return b.id - a.id;\n  },\n});\nconst initialState = postsEntityAdapter.getInitialState({\n  postsStatus: LoadingStatus.IDLE,\n});\n\nexport const fetchPosts = createAsyncThunk(\n  \"Posts/fetchPosts\",\n  async (_, thunkAPI) => {\n    const result = await fetch(\n      \"https://jsonplaceholder.typicode.com/posts/?userId=1\"\n    );\n    return (await result.json()) as Post[];\n  }\n);\n\nexport const putUpdatedPost = createAsyncThunk(\n  \"Posts/updatePost\",\n  async (post: Post) => {\n    const result = await fetch(\n      `https://jsonplaceholder.typicode.com/posts/${post.id}`,\n      {\n        method: \"PUT\",\n        body: JSON.stringify(post),\n        headers: {\n          \"Content-type\": \"application/json; charset=UTF-8\",\n        },\n      }\n    );\n    return (await result.json()) as Post;\n  }\n);\n\nexport const postsSlice = createSlice({\n  name: \"Posts\",\n  initialState,\n  reducers: {\n    addPost: (state, action: PayloadAction<Post>) => {\n      const max = state.ids.reduce((prev, current) =>\n        prev > current ? prev : current\n      );\n      action.payload.id = +max + 1;\n      postsEntityAdapter.addOne(state, action.payload);\n    },\n    deletePost: (state, action: PayloadAction<number>) => {\n      postsEntityAdapter.removeOne(state, action.payload);\n    },\n    updatePost: (state, action: PayloadAction<Post>) => {\n      postsEntityAdapter.upsertOne(state, action.payload);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchPosts.pending, (state) => {\n        state.postsStatus = LoadingStatus.LOADING;\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.postsStatus = LoadingStatus.READY;\n        postsEntityAdapter.upsertMany(state, action.payload);\n      })\n      .addCase(putUpdatedPost.fulfilled, (state, action) => {\n        state.postsStatus = LoadingStatus.READY;\n        postsEntityAdapter.upsertOne(state, action.payload);\n      });\n  },\n});\n\nexport const { addPost, deletePost, updatePost } = postsSlice.actions;\nexport const postSelectors = postsEntityAdapter.getSelectors<RootState>(\n  (state) => state.posts\n);\n","// @flow\nimport * as React from \"react\";\nimport { Dispatch, FC, useState } from \"react\";\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { addPost, Post } from \"../slices/PostsSlice\";\n\ninterface PostAddFromProps {\n  setCreationMode: Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const PostAddFrom: FC<PostAddFromProps> = ({ setCreationMode }) => {\n  const dispatch = useDispatch();\n  const emptyPost: Post = { id: 0, title: \"\", body: \"\" };\n  const [post, modifyPost] = useState<Post>(emptyPost);\n\n  return (\n    <div>\n      <Form>\n        <FormGroup>\n          <Label for=\"title\">Title</Label>\n          <Input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter title\"\n            value={post.title}\n            onChange={(e) =>\n              modifyPost((prevState) => {\n                return { ...prevState, title: e.target.value };\n              })\n            }\n          />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"text\">Text</Label>\n          <Input\n            type=\"text\"\n            name=\"text\"\n            placeholder=\"Enter text\"\n            value={post.body}\n            onChange={(e) =>\n              modifyPost((prevState) => {\n                return { ...prevState, body: e.target.value };\n              })\n            }\n          />\n        </FormGroup>\n        <Button\n          onClick={() => {\n            dispatch(addPost(post));\n            setCreationMode(false);\n            modifyPost(() => emptyPost);\n          }}\n          color=\"primary\"\n        >\n          Add post\n        </Button> {' '}\n        <Button onClick={() => setCreationMode(false)} color=\"dark\">\n          Cancel\n        </Button>\n      </Form>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Card, CardBody, CardText } from \"reactstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { deletePost, Post } from \"../slices/PostsSlice\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface SinglePostProps {\n  post: Post;\n}\n\nconst SinglePost: React.FC<SinglePostProps> = ({ post }) => {\n  const [currentPost, setCurrentPost] = useState<Post>(post);\n  const history = useHistory();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    setCurrentPost(post);\n  }, [post]);\n\n  return (\n    <Card className='border-0 m-2' body color=\"light\">\n      <CardBody>\n        <CardText tag={\"h5\"}>{currentPost.title}</CardText>\n        <CardText tag={\"p\"}>{currentPost.body}</CardText>\n        <Button onClick={() => dispatch(deletePost(post.id))} color=\"danger\">\n          Delete{\" \"}\n        </Button>{\" \"}\n        <Button\n          onClick={() => {\n            history.push(`post/${post.id}`);\n          }}\n        >\n          Edit post\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n\n\nexport default SinglePost;\n","import { Spinner } from \"reactstrap\";\nimport * as React from \"react\";\n\nexport const spinner = () => <Spinner type=\"grow\" color=\"dark\" />;\n","// @flow\nimport * as React from \"react\";\nimport { PostAddFrom } from \"./PostAddFrom\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport SinglePost from \"./SinglePost\";\nimport { LoadingStatus, postSelectors } from \"../slices/PostsSlice\";\nimport { spinner } from \"../common/common\";\nimport { Button } from \"reactstrap\";\nimport { useState } from \"react\";\n\nexport function Posts() {\n  const postsStatus = useSelector(\n    (state: RootState) => state.posts.postsStatus\n  );\n  const postsSelection = useSelector((state: RootState) =>\n    postSelectors.selectAll(state)\n  );\n  const [creationMode, setCreationMode] = useState(false);\n\n  let posts = postsSelection.map((post) => {\n    return <SinglePost post={post} key={post.id} />;\n  });\n  return (\n    <div>\n      {!creationMode && (\n        <>\n          <Button onClick={() => setCreationMode(true)} color=\"primary\">\n            Create new post\n          </Button>\n        </>\n      )}\n      {creationMode && (\n        <div className=\"mb-2\">\n          <PostAddFrom setCreationMode={setCreationMode} />\n        </div>\n      )}\n      <div className=\"mb-2\">\n        {postsStatus === LoadingStatus.LOADING ? spinner() : posts}\n      </div>\n    </div>\n  );\n}\n","import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\nimport { RootState } from \"../store\";\nimport { LoadingStatus } from \"./PostsSlice\";\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nconst commentEntityAdapter = createEntityAdapter<Comment>();\n\nconst initialState = commentEntityAdapter.getInitialState({\n  loadingStatus: LoadingStatus.IDLE,\n});\n\nexport const fetchPostComments = createAsyncThunk(\n  \"fetchPostComments\",\n  async (id: string) => {\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/comments?postId=${id}`\n    );\n    return (await response.json()) as Comment[];\n  }\n);\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchPostComments.pending, (state) => {\n      state.loadingStatus = LoadingStatus.LOADING;\n    });\n    builder.addCase(fetchPostComments.fulfilled, (state, action) => {\n      commentEntityAdapter.upsertMany(state, action.payload);\n      state.loadingStatus = LoadingStatus.READY;\n    });\n  },\n});\n\nexport const commentsSelector = commentEntityAdapter.getSelectors<RootState>(\n  (state) => state.comments\n);\n","import { Action, configureStore } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { ThunkAction } from 'redux-thunk';\nimport { postsSlice } from './slices/PostsSlice';\nimport { commentsSlice } from './slices/CommentsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsSlice.reducer,\n    comments: commentsSlice.reducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\n  RootState,\n  unknown,\n  Action<string>>;\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLongArrowAltLeft, faSync } from \"@fortawesome/free-solid-svg-icons\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"../store\";\nimport { fetchPosts } from \"../slices/PostsSlice\";\n\nconst ControlsComponent = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const reload = () => {\n    dispatch(fetchPosts());\n  };\n\n  return (\n    <div>\n      <Button onClick={() => history.goBack()}>\n        <FontAwesomeIcon icon={faLongArrowAltLeft} size=\"1x\" />\n      </Button>{\" \"}\n      <Button onClick={() => reload()} className=\"\">\n        <FontAwesomeIcon icon={faSync} size=\"1x\" />\n      </Button>\n      <br />\n    </div>\n  );\n};\n\nexport default ControlsComponent;\n","// @flow\nimport * as React from \"react\";\nimport { Nav, Navbar, NavbarText, NavItem, NavLink } from \"reactstrap\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../store\";\nimport { Link } from \"react-router-dom\";\nimport ControlsComponent from \"../controls/ControlsComponent\";\nimport { postSelectors } from \"../slices/PostsSlice\";\n\nexport function Header() {\n  const postsState = useSelector((state: RootState) =>\n    postSelectors.selectIds(state)\n  );\n\n  return (\n    <>\n      <Navbar color=\"light\" expand=\"md\" className=\"mb-3\">\n        <Nav className=\"mr-auto\" navbar>\n          <NavItem className=\"mr-auto\">\n            <NavLink tag={Link} to=\"/posts\">\n              Posts\n            </NavLink>\n          </NavItem>\n          <NavItem className=\"mr-auto\">\n            <NavLink tag={Link} to=\"/about\">\n              About\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <ControlsComponent />\n        <NavbarText className=\"pl-3\">\n          Total posts: {postsState.length}\n        </NavbarText>\n      </Navbar>\n    </>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { commentsSelector, fetchPostComments } from \"../slices/CommentsSlice\";\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../store\";\nimport { Card, CardBody, CardSubtitle, CardText, CardTitle } from \"reactstrap\";\nimport { LoadingStatus } from \"../slices/PostsSlice\";\nimport { spinner } from \"../common/common\";\n\nconst Comments = () => {\n  const { id } = useParams<{ id: string }>();\n  const comments = useSelector((state: RootState) =>\n    commentsSelector.selectAll(state).filter((value) => value.postId === +id)\n  );\n  const dispatch = useAppDispatch();\n  const commentsLoadingStatus = useSelector(\n    (state: RootState) => state.comments.loadingStatus\n  );\n\n  useEffect(() => {\n    dispatch(fetchPostComments(id));\n  }, []);\n\n  const renderComments = () =>\n    comments.map((value) => (\n      <Card body className=\"text-left m-2 border-0\" color=\"light\">\n        <CardBody>\n          <CardTitle tag=\"h6\">{value.name}</CardTitle>\n          <CardSubtitle>{value.email}</CardSubtitle>\n          <CardText>{value.body}</CardText>\n        </CardBody>\n      </Card>\n    ));\n\n  return (\n    <div>\n      <h4 className=\"\">\n        Comments {commentsLoadingStatus !== LoadingStatus.READY && spinner()}\n      </h4>\n      {renderComments()}\n    </div>\n  );\n};\n\nexport default Comments;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardText,\n  CardTitle,\n  Input,\n} from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"../store\";\nimport { postSelectors, putUpdatedPost } from \"../slices/PostsSlice\";\nimport Comments from \"./Comments\";\n\nconst PostDetail = () => {\n  const { id } = useParams<{ id: string }>();\n  const currentPost = useSelector((state: RootState) =>\n    postSelectors.selectById(state, id)\n  );\n  const dispatch = useAppDispatch();\n\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n\n  useEffect(() => {\n    setTitle(currentPost?.title || \"\");\n    setBody(currentPost?.body || \"\");\n  }, [currentPost]);\n\n  const viewContent = () => (\n    <CardBody>\n      <CardTitle tag=\"h5\">{currentPost?.title}</CardTitle>\n      <CardText>{currentPost?.body}</CardText>\n      <Button color=\"primary\" onClick={() => setEditMode(true)}>\n        Edit\n      </Button>\n    </CardBody>\n  );\n\n  const editContent = () => (\n    <CardBody>\n      <Input\n        className=\"m-2\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      >\n        {currentPost?.title}\n      </Input>\n      <Input\n        className=\"m-2\"\n        value={body}\n        onChange={(e) => setBody(e.target.value)}\n      >\n        {currentPost?.body}\n      </Input>\n      <Button\n        className=\"m-2\"\n        color=\"primary\"\n        onClick={() => {\n          dispatch(putUpdatedPost({ ...currentPost!, title, body }));\n          setEditMode(false);\n        }}\n      >\n        Save\n      </Button>\n      <Button\n        className=\"m-2\"\n        color=\"dark\"\n        onClick={() => {\n          setEditMode(false);\n          setTitle(currentPost?.title!);\n          setBody(currentPost?.body!);\n        }}\n      >\n        Cancel\n      </Button>\n    </CardBody>\n  );\n\n  return (\n    <div>\n      <Card className=\"bg-white mb-4 text-left\">\n        <CardHeader>Post {id}</CardHeader>\n        {!editMode ? viewContent() : editContent()}\n      </Card>\n      <Comments />\n    </div>\n  );\n};\n\nexport default PostDetail;\n","import React from \"react\";\nimport { Badge } from \"reactstrap\";\n\nconst About = () => {\n  return (\n    <div>\n      <h1>React playground</h1>\n      <p>Welcome to my react playground</p>\n      <p>\n        Built using\n        <Badge>react</Badge>\n        <Badge>typescript</Badge>\n        <Badge>redux</Badge>\n        <Badge>redux toolkit</Badge>\n        <Badge>reactstrap</Badge>\n      </p>\n      <footer>Dmitry Avgustis 2021</footer>\n    </div>\n  );\n};\n\nexport default About;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { Posts } from \"./posts/Posts\";\nimport { Header } from \"./header/Header\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport PostDetail from \"./postdetail/PostDetail\";\nimport { useSelector } from \"react-redux\";\nimport { RootState, useAppDispatch } from \"./store\";\nimport { fetchPosts, LoadingStatus } from \"./slices/PostsSlice\";\nimport About from './about/About';\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const postsStatus = useSelector(\n    (state: RootState) => state.posts.postsStatus\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (postsStatus === LoadingStatus.IDLE) {\n        await dispatch(fetchPosts());\n      }\n    })();\n  }, [postsStatus]);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container className=\"container container-lg\">\n        <Row>\n          <Col className=\"\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/about\" />\n              </Route>\n              <Route path=\"/posts\" component={Posts} />\n              <Route exact path=\"/post/:id\" component={PostDetail} />\n              <Route path=\"/about\" component={About} />\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n      <footer>Dmitry Avgustis 2021 {process.env.REACT_APP_TEST}</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n\n      <Provider store={store}>\n        <App/>\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}